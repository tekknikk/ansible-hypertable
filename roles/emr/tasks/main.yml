# TODO: need following tasks:  check cluster build status until "waiting" then get roles and ip address's.  need to parse json from aws cli.
---
- name: Turn off ansible host checking on local
  sudo: no
  local_action: >
    shell export ANSIBLE_HOST_KEY_CHECKING=False

- name: Create keypair for cluster
  local_action:
    module: aws_cli
    commandline: >
      ec2 create-key-pair
          --key-name {{name}}
          --profile {{profile}}
    register: create_key_pair
- debug: var=create_key_pair
  tags:
    - debug

- name: Create EMR Cluster and register it's ID 
  local_action:
    module: aws_cli
    commandline: >
      emr create-cluster
          --name {{name}}
          --ec2-attributes KeyName={{keyname}},AvailabilityZone=ap-southeast-2a
          --ami-version {{ami_version}}
          --instance-groups InstanceGroupType=MASTER,InstanceCount={{masters}},InstanceType={{type}} InstanceGroupType=CORE,InstanceCount={{cores}},InstanceType={{type}} InstanceGroupType=TASK,InstanceCount={{tasks}},InstanceType={{type}}
          --enable-debugging
          --log-uri {{log_uri}}
          --applications Name=MapR,Args=--edition,{{mapr_edition}},--version,{{mapr_version}}
          --profile {{profile}}
  register: create_cluster
- debug: var=create_cluster
  tags:
    - debug

# --cluster-id create_cluster.ClusterId
- name: Wait for EMR Cluster to start
  local_action:
    module: aws_cli
    commandline: >
      emr describe-cluster
           --cluster-id {{create_cluster.ClusterId}}
           --profile {{profile}}
  register: describe_cluster
  ignore_errors: true
  until: >
    describe_cluster.Cluster.Status.State == "WAITING"
  retries: 30
  delay: 15

- name: Get instance details for MASTERs
  local_action:
    module: aws_cli
    commandline: >
      emr list-instances
           --cluster-id {{create_cluster.ClusterId}}
           --instance-group-types MASTER
           --profile {{profile}}
  register: masters
- debug: var=masters
  tags:
    - debug

- name: Get instance details for CORES
  local_action:
    module: aws_cli
    commandline: >
      emr list-instances
           --cluster-id {{create_cluster.ClusterId}}
           --instance-group-types CORE
           --profile {{profile}}
  register: cores
- debug: var=cores
  tags:
    - debug

- name: Get instance details for TASKS
  local_action:
    module: aws_cli
    commandline: >
      emr list-instances
           --cluster-id {{create_cluster.ClusterId}}
           --instance-group-types TASK
           --profile {{profile}}
  register: tasks
- debug: var=tasks
  tags:
    - debug

- name: Store ansible host file for cluster public IP's
  local_action:
    module: template
    src: public_ip.json.j2
    dest: "./{{name}}.hosts"

- name: Store clusters private IP's for updating each nodes /etc/hosts
  local_action:
    module: template
    src: private_ip.json.j2
    dest: "./{{name}}_etc_hosts"

- name: Store MASTERS var
  local_action:
    module: template
    src: cluster_masters.json.j2
    dest: "./{{name}}_masters"

- name: Store CORES var
  local_action:
    module: template
    src: cluster_cores.json.j2
    dest: "./{{name}}_cores"

- name: Store TASKS var
  local_action:
    module: template
    src: cluster_tasks.json.j2
    dest: "./{{name}}_tasks"

- name: Build user configs section of Capfile
  local_action:
    module: template
    src: Capfile.user_config.json.j2
    dest: "./roles/hypertable/files/Capfile.user_config"

- name: Add first MASTER (master1) public IP to host group @cluster_master
  local_action:
    module: add_host
    groups: cluster_master
    hostname: "{{masters.Instances[0].PublicIpAddress}}"
    ansible_connection: ssh
    ansible_ssh_user: "hadoop"
    ansible_ssh_private_key_file: "/Users/teknik/Dropbox/p7/fairfax/sec/pandahard.pem"

- name: Add MASTER public IPs to host group @cluster_masters
  local_action:
    module: add_host
    groups: cluster_masters
    hostname: "{{item.PublicIpAddress}}"
    ansible_connection: ssh
    ansible_ssh_user: "hadoop"
    ansible_ssh_private_key_file: "/Users/teknik/Dropbox/p7/fairfax/sec/pandahard.pem"
  with_items: masters.Instances

- name: Add CORE public IPs to host group @cluster_cores
  local_action:
    module: add_host
    groups: cluster_cores
    hostname: "{{cores.Instances[0].PublicIpAddress}}"
    ansible_connection: ssh
    ansible_ssh_user: "hadoop"
    ansible_ssh_private_key_file: "/Users/teknik/Dropbox/p7/fairfax/sec/pandahard.pem"
  with_items: cores.Instances

- name: Add TASK public IP to host group @cluster_tasks
  local_action:
    module: add_host
    groups: cluster_tasks
    hostname: "{{item.PublicIpAddress}}"
    ansible_connection: ssh
    ansible_ssh_user: "hadoop"
    ansible_ssh_private_key_file: "/Users/teknik/Dropbox/p7/fairfax/sec/pandahard.pem"
  with_items: tasks.Instances



- name: Enable SSH access to CORES but ignore error if exists
  ignore_errors: yes
  local_action:
    module: aws_cli
    commandline: >
      ec2 authorize-security-group-ingress
           --group-name ElasticMapReduce-slave
           --protocol tcp
           --port 22
           --cidr 0.0.0.0/0
           --profile {{profile}}
  register: authorize_ssh
- debug: var=authorize_ssh
  tags:
    - debug

- name: Enable TCP 15860 for Monitoring but ignore error if exists
  ignore_errors: yes
  local_action:
    module: aws_cli
    commandline: >
      ec2 authorize-security-group-ingress
           --group-name ElasticMapReduce-master
           --protocol tcp
           --port 15860
           --cidr 0.0.0.0/0
           --profile {{profile}}
  register: authorize_ssh
- debug: var=authorize_ssh
  tags:
    - debug